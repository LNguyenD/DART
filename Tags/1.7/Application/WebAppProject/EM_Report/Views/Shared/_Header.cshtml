@using EM_Report.Domain;
@using EM_Report.Helpers;
@using EM_Report.Domain.Enums;
@{

}
<div class="header">
    @{        
        var intSystemId = !string.IsNullOrEmpty(Request["systemid"]) ? int.Parse(Request["systemid"]) : 0;
        var systemName = Base.GetSystemNameByUrl(Request.Url.PathAndQuery);
        
        if (string.IsNullOrEmpty(systemName))
        {
            // try to get from system Id
            if (intSystemId != 0)
            {
                var lstSystems = Base.LoginSession.lstSystems.ToList();
                foreach (var system in lstSystems)
                {
                    if (system.SystemId == intSystemId) 
                    {
                        systemName = system.Name.ToUpper();
                    }
                }
            }
        }

        systemName = (systemName == "EML" ? "WCNSW" : systemName == "HEM" ? "Hospitality" : systemName);
        if (Base.GetAction.ToLower().Contains("changepassword"))
        {
            if(Base.LoginType == LoginType.External)
            {
                 <div class="breadcrum_01">
                    <a class="current">Account</a> <a class="current">Change password</a>
                </div>
            }
        }
        else
        {
        <div class="breadcrum_01">
            @if (systemName != string.Empty)
            {              
                <a class="current">@systemName</a>
            }
            else
            {
                if (Base.GetController.ToLower() == "dashboard"
                    && Base.GetAction.ToLower().Contains("level")
                    && systemName != string.Empty)
                {
                <a class="current">@systemName</a>
                }
            }
            @if (Base.GetController.ToLower() == "dashboard")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard?systemid=" + intSystemId)">Dashboard</a>
                }
                else
                {
                <a class="current">Dashboard</a>
                }
            }
            else if (Base.GetController.ToLower() == "dashboardlevel")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard?systemid=" + intSystemId)">Dashboard</a>
                <a href="@Base.AbsoluteUrl("~/dashboardlevel?systemid=" + intSystemId)">
                    Dashboard level</a>
                }
                else
                {
                <a href="@Base.AbsoluteUrl("~/dashboard?systemid=" + intSystemId)">Dashboard</a>
                <a class="current">Dashboard level</a>
                }
            }
            else if (Base.GetController.ToLower() == "dashboard_graph_description")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard_graph_description?systemid=" + intSystemId)">
                    Graph description</a>
                }
                else
                {
                <a class="current">Graph description</a>
                }
            }
            else if (Base.GetController.ToLower() == "dashboard_projection")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard_projection?systemid=" + intSystemId)">
                    Projection</a>
                }
                else
                {
                <a class="current">Projection</a>
                }
            }
            else if (Base.GetController.ToLower() == "dashboard_traffic_light_rules")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard_traffic_light_rules?systemid=" + intSystemId)">
                    Metric light</a>
                }
                else
                {
                <a class="current">Metric light</a>
                }
            }
            else if (Base.GetController.ToLower() == "dashboard_target_base")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/dashboard_target_base?systemid=" + intSystemId)">
                    Target base</a>
                }
                else
                {
                <a class="current">Target base</a>
                }
            }
            else if (Base.GetController.ToLower() == "report")
            {
                if (Base.GetAction.ToLower() == "category")
                {
                <a class="current">Report</a>
                <a class="current">Category</a>
                }
                else if (Base.GetAction.ToLower() == "categorydetails")
                {
                <a class="current">Report</a>
                <a href="@Base.AbsoluteUrl("~/report/category")">Category</a>
                }
                else if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/report?systemid=" + intSystemId)">Report</a>
                }
                else
                {
                    <a class="current">Report</a>
                    if (Request.Url.ToString().ToLower().IndexOf("reports/port") >= 0)
                    {
                       <a class="current">Portfolio</a> 
                    }
                }
            }
            else if (Base.GetController.ToLower() == "user")
            {
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/user?systemid=" + intSystemId)">Users management</a>
                }
                else
                {
                <a class="current">Users management</a>
                }
            }
            else if (Base.GetController.ToLower() == "systemrole")
            {
                <a class="current">Permission</a>
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/systemrole")">System role</a>
                }
                else
                {
                <a class="current">System role</a>
                }
            }
            else if (Base.GetController.ToLower() == "organisation_level"
                    || Base.GetController.ToLower() == "level"
                    || Base.GetController.ToLower() == "organisation")
            {
                <a class="current">Group management</a>
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/organisation_level?systemid=" + intSystemId)">
                    Organisation level</a>
                }
                else
                {
                <a class="current">Organisation level</a>
                }
            }
            else if (Base.GetController.ToLower() == "team")
            {
                <a class="current">Group management</a>
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/team?systemid=" + intSystemId)">Team</a>
                }
                else
                {
                <a class="current">Team</a>
                }
            }
            else if (Base.GetController.ToLower() == "external")
            {
                <a class="current">Group management</a>
                if (Base.GetAction.ToLower() == "details")
                {
                <a href="@Base.AbsoluteUrl("~/external")">External group</a>
                }
                else
                {
                <a class="current">External group</a>
                }
            }
            @if((Base.GetController.ToLower() == "dashboard" && Base.GetAction.ToLower().Contains("level"))
                && !"level1".Contains(Base.GetAction.ToLower()))
            {
        	    <span class="print_icon"><a id="printAllGraphs" onclick="printAllGraphs()"><img src="@Url.ContentV("~/images/ico_print.png")" width="23" height="19" alt="Print all graphs" title="Print all graphs" /></a></span>
            }
        </div>
        }
    }
    @if (Base.GetController.ToLower() == "dashboard")
    {
        if ("level0,level1,level2,level3,level4".Contains(Base.GetAction.ToLower()))
        {
            @Html.Partial("TrafficLight")
        }
        if ("level0,level1,level2,level3,level4,level5,level6,level7".Contains(Base.GetAction.ToLower()))
        {
            @Html.Partial("Crumbtrail")
            @Html.Partial("TimeAccess")
        }
        if ("level2,level4".Contains(Base.GetAction.ToLower()))
        {
            @Html.Partial("VisibilityTooltip")
        }
    }
    @if (Base.GetController.ToLower() == "dashboard" && Base.GetAction.ToLower().Contains("level"))
    {
        @Html.Partial("~/Views/Dashboard/RawDataWrap.cshtml")
    }
</div>

<script type="text/javascript">
    $(function () {
        if (window.location.href.toLowerCase().indexOf('cpr_') >= 0)
        {
            // hide print icon in CPR Dashboard
            $(".print_icon").hide();
        }
    })

    $("#aPrintIcon").click(function () {
        openPrintPopup();
    });

    function printAllGraphs() {
	
		$("#printInstruction").hide();
	
        if (window.location.href.toLowerCase().indexOf('level2') > -1) { // just have tabs on level 2
            if (window.location.href.toLowerCase().indexOf('awc') < 0) {
                var type = $(".tab .tab_current").attr('id').replace('tab_', '').replace('_', '');
                if (type == 'agencies') {
                    type = 'agency';
                }
                else if (type == 'account_manager') {
                    type = 'AccountManager'
                }

                var iframe = $('iframe').filter(function () {
                    return $(this).attr('id').toLowerCase().indexOf(type.toLowerCase()) > -1;
                });
            }
            else {
                iframe = $('iframe[id*="ifReport_Agency"]');
            }
        }
        else {
            iframe = $('iframe[id*="ifReport"]');
        }
        
        var graphContainer;

        if (window.location.href.toLowerCase().indexOf('_cpr_') < 0) {
            // RTW/ AWC
            graphContainer = iframe.contents().find('[alt*="graph_large_width_100"]');
        }
        else {
            // CPR
            graphContainer = iframe.contents().find('img[alt="graph_view_0"]').parent();
        }

        var graphContainerClone = graphContainer.clone().css({ 'display': '' });
        var graphContainerSorted = graphContainerClone.clone();

        validateGraphSession(graphContainer);

        var graphTitle;

        if (window.location.href.toLowerCase().indexOf('_cpr_') < 0) {
            // RTW/ AWC
            clipGraphs(graphContainer, graphContainerSorted);
            //drawAllGraphs(graphContainer, graphContainerSorted);

            // PREPARE GRAPH TITLE
            graphContainerSorted.find('img[alt*="graph"]').each(function () {
                var graphName = $(this).attr('alt');
                var graphTitle = iframe.contents().find('td[alt="title_' + graphName + '"]').text();
                if (window.location.href.toLowerCase().indexOf('awc') > -1) {
                    $(this).closest('table').before('<div class="graphTitle" align="center">' + graphTitle + '</div>');
                    $(this).closest('table').prev().css({ 'font-family': 'arial', 'font-size': '12pt', 'color': '#037baf', 'font-weight': '700' });
                }
                else if (window.location.href.toLowerCase().indexOf('rtw') > -1
                    || window.location.href.toLowerCase().indexOf('_cpr_') > -1
                    || window.location.href.toLowerCase().indexOf('level0') > -1) {
                    $(this).parent().before('<div class="graphTitle" align="center">' + graphTitle + '</div>');
                    $(this).parent().prev().css({ 'font-family': 'arial', 'font-size': '12pt', 'color': '#037baf', 'font-weight': '700' });
                }
            });

            graphContainerSorted.find('map').remove();
        }
        else {
            // CPR
            clipGraphs(graphContainer, graphContainerClone);

            // PREPARE GRAPH TITLE
            graphTitle = iframe.contents().find('td[alt="title_graph_view_0"]').text();
        }

        // SHOW POPUP
        $("#overlay", window.parent.document).fadeIn('fast', function () {

            //resize print all review popup
            var popupWidth = $(window.parent).width() - 200;
            var popupHeight = $(window.parent).height() - 110;

            $(".viewPrintContent").css("cssText", "width: " + popupWidth + "px !important; height:" + popupHeight + "px !important;");
            //$("#printContent").height(popupHeight - 10);
            $("#printContent").contents().find('body').empty();
            $("#printContent").contents().find('body').append('<div align="center" id="content"></div>');
            
            var graphContent = $("#printContent").contents().find('body div#content');

            if (window.location.href.toLowerCase().indexOf('_cpr_') < 0) {
                // RTW/ AWC

                graphContainerSorted.find("table[alt='projection_table']").attr("alt", "projection_table_clone");
                graphContainerSorted.find('img[alt*="graph"]').each(function () {
                    var graph;
                    if (window.location.href.toLowerCase().indexOf('awc') > -1) {
                        graph = $(this).closest('table').css({ 'overflow': '' });
                    }
                    else {
                        if ($(this).attr('alt') == "graph_view_1") {
                            graph = $(this).closest('table').css({ 'overflow': '' });
                            //re-locate the indicator icons
                            graph.find("td[alt*='Indicator']").each(function () {
                                var src = $(this).children('img').attr('src').replace('../../','../');
                                $(this).children('img').attr('src', src);
                                $(this).children('img').css({ "left": "-200px", "position": "relative", "top": "18px" });
                            });
                        }
                        else {
                            graph = $(this).parent().css({ 'overflow': '' });
                        }
                    }

                    var projectionTable = graph.find('table[alt="projection_table_clone"]');
                    if (projectionTable.length > 0) {
                        formatProjectionTable(projectionTable);
                    }

                    var div = $('<div>');
                    div.css({ 'margin-bottom': '50px' });
                    div.append(graph.prev()); // add graph title
                    div.append(graph);
                    graphContent.append(div);
                });

                // SORT GRAPHS: AWC only
                if (window.location.href.toLowerCase().indexOf('awc') > -1) {
                    graphContent.children("div").sort(sortGraphs).appendTo(graphContent);
                }
            }
            else {
                // CPR

                var div = $('<div>');
                div.css({ 'margin-bottom': '50px' });

                // add graph title
                div.append('<div class="graphTitle" align="center">' + graphTitle + '</div>');
                div.find("div.graphTitle").css({ 'font-family': 'arial', 'font-size': '12pt', 'color': '#037baf', 'font-weight': '700' });

                div.append(graphContainerClone);
                graphContent.append(div);
            }

            $("#printContent").contents().find("body").css("width", "99%");
            $("#printContent").contents().find("html").css({ "overflow": "auto", "overflow-x": "auto" });
            //$("#printContent").height(graphContainer.height() + 30); // use graphContainer instead of graphContainerClone to get correct height for IE

            var selfPopup = $(".viewPrintContent");
            selfPopup.css("top", ($(window).height() - selfPopup.height()) / 2 + $(window).scrollTop() + "px");

            selfPopup.css("left", "15px");
            selfPopup.fadeIn('slow');
            selfPopup.css("margin", "auto");
        });
    }
    
    function getGraphSortIndex(graphName) {
        switch (graphName) {
            case "graph_12":
                return 1;
            case "graph_35":
                return 2;
            case "graph_5plus":
                return 3;
            case "graph_wholeTMF":
            case "graph_wholeWCNSW":
            case "graph_wholeHospitality":
                return 4;
            default:
                return 0;
        }
    }

    function sortGraphs(a, b) {
        var a_val = getGraphSortIndex($(a).find('img[alt^="graph_"]').attr("alt"));
        var b_val = getGraphSortIndex($(b).find('img[alt^="graph_"]').attr("alt"));

        if (a_val > b_val) {
            return 1;
        }
        if (a_val < b_val) {
            return -1;
        }
        return 0;
    }

    function validateGraphSession(graphView) {
        var graph = graphView.find('img[alt*="graph"]:eq(0)');
        graph.error(function () {
            parent.window.location = parent.window.g_baseUrl + '/account/login?logout=true&ssrs=lost';
        });
    }

    function formatProjectionTable(projectionTable) {
        projectionTable.css('font-size', '11px');
        projectionTable.css('font-family', '"lato_regular", Arial, Helvetica, sans-serif');
        projectionTable.find('tr:gt(0):lt(3)').each(function (index) {
            var rowIndex = index;
            $(this).children('td:gt(1)').each(function (index) {
                $(this).css('text-align', 'center');
                $(this).css('vertical-align', 'middle');
                $(this).css('padding', '2px');
                $(this).css('border-style', 'solid');
                $(this).css('border-width', '1px');
                $(this).css('border-color', '#e1e1e1');

                if (index == 0) {
                    $(this).css('color', '#037baf');
                }
            });

            // set color for table header
            if (index == 0) {
                $(this).css('color', '#037baf');
            }

            // set color for table row 1
            $(this).children('td:gt(1)').each(function (index) {
                if (rowIndex == 1) {
                    $(this).css('background-color', '#edf2f6');
                }
            });
        });
    }

    function clipGraphs(graphContainer, graphContainerClone) {
        graphContainer.find('img[alt*="graph"]').each(function () {
            var graphImg = $(this);
            var graphInfo = {};
            graphInfo.graphSrc = graphImg.attr('src');
            graphInfo.graphName = graphImg.attr('alt');
            graphInfo.graphWidth = graphImg.width() < graphImg.parent().width() || graphImg.parent().width() == 0 ? graphImg.width() : graphImg.parent().width();
            graphInfo.graphHeight = graphImg.parent().height();

            if (graphInfo.graphWidth != 0 && graphInfo.graphHeight != 0) {
                var graphLeft = parseInt(graphImg.css('left').replace('-', '').replace('px', ''));
                if (isNaN(graphLeft))
                    graphLeft = 0;
                graphInfo.graphLeft = graphLeft;

                var graphTop = parseInt(graphImg.css('top').replace('-', '').replace('px', ''));
                if (isNaN(graphTop))
                    graphTop = 0;
                graphInfo.graphTop = graphTop;
                graphInfo.graphBottom = graphInfo.graphTop + graphInfo.graphHeight;

                var graph = graphContainerClone.find('img[alt="' + graphInfo.graphName + '"]');
                graph.css('clip', 'rect(' + graphInfo.graphTop + 'px,' + graphInfo.graphWidth + 'px,' + graphInfo.graphBottom + 'px,' + graphInfo.graphLeft + 'px' + ')');
                graph.css('position', 'absolute');
                graph.css('left', '0px');
                graph.parent().width(graphInfo.graphWidth);
                graph.parent().height(graphInfo.graphHeight);
                graph.parent().css('position', 'relative');
            }
        });
    }

    //function drawAllGraphs(graphContainer, graphContainerClone) {
    //    //var largeGraphContainer = $('[alt*="graph_large_width_100"]');
    //    graphContainer.find('img[alt*="graph"]').each(function () {
    //        var graphImg = $(this);
    //        var graphInfo = {};
    //        graphInfo.graphSrc = graphImg.attr('src');
    //        graphInfo.graphName = graphImg.attr('alt');
    //        graphInfo.graphWidth = graphImg.width();
    //        graphInfo.graphHeight = graphImg.parent().height();
    //        var graphLeft = parseInt(graphImg.css('left').replace('-', '').replace('px', ''));
    //        if (graphLeft === 'NaN')
    //            graphLeft = 0;
    //        graphInfo.graphLeft = graphLeft;

    //        var graphTop = parseInt(graphImg.css('top').replace('-', '').replace('px', ''));
    //        if (graphTop === 'NaN')
    //            graphTop = 0;
    //        graphInfo.graphTop = graphTop;

    //        drawGraph(graphContainerClone, graphInfo);
    //    });
    //}

    //function drawGraph(graphContainerClone, graphInfo) {
    //    var graphImg = graphContainerClone.find('img[alt="' + graphInfo.graphName + '"]');
    //    var graphSrc = graphInfo.graphSrc;
    //    var graphName = graphInfo.graphName;
    //    var graphWidth = graphInfo.graphWidth;
    //    var graphHeight = graphInfo.graphHeight;
    //    var graphLeft = graphInfo.graphLeft;
    //    var graphTop = graphInfo.graphTop;

    //    //$(this).parent().after('<canvas id="' + graphName + '" width="' + graphWidth + '" height="' + graphHeight + '"></canvas>');
    //    var canvasId = 'canvas_' + graphName;
    //    graphImg.replaceWith('<canvas id="' + canvasId + '" width="' + graphWidth + '" height="' + graphHeight + '"></canvas>');
    //    var canvas = graphContainerClone.find('#' + canvasId)[0];
    //    var context = canvas.getContext('2d');
    //    var imageObj = new Image();

    //    imageObj.onload = function () {
    //        context.drawImage(imageObj, 0, 0, graphWidth, graphHeight, 0, 0, graphWidth, graphHeight);
    //    };
    //    imageObj.src = graphSrc;
    //}
</script>