@model EM_Report.Domain.Dashboard_Target_Base          
@using EM_Report.Common.Utilities;
@using EM_Report.Helpers;
@using EM_Report.Repositories;
@using EM_Report.Domain;
@{    
    ViewBag.Title = "Target Base Details";
    Layout = Request.IsAjaxRequest() ? null : "~/Views/Shared/_Master.cshtml";
}
@functions {  
	public bool IsNew()
	{
		return (Model != null && Model.Id > 0) ? false : true;
	}

	public string AddButtonText()
	{
		return IsNew() ? "add" : "save";
	}
}
<link href="@Url.ContentV("~/Css/calendar.css")" rel="stylesheet" type="text/css" />
<div class="wrapper">
    <div class="w_100p">
    @using(Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="formWrap">
            @Html.Hidden("action")
            @if (!IsNew())
            {
                @Html.HiddenFor(e => e.Id)
            }              
            <h1>@(IsNew() ? "Target Base List Add" : "Target Base List Edit")</h1>
            @Html.Partial("_ShowMessage")  
            <div class="formInline">
                <label>Remuneration</label>
                @Html.TextBoxFor(e => e.Remuneration, new { id = "txtRemuneration", name = "txtRemuneration", @class = "Text" })
                @Html.ValidationMessageFor(e => e.Remuneration) 
                <div class="clear"></div>    
            </div>   
            <div class="formInline">
                <label>Type</label>
                @Html.TextBoxFor(e => e.Type, new { id = "txtType", name = "txtType", @class = "Text" })
                @Html.ValidationMessageFor(e => e.Type) 
                <div class="clear"></div>    
            </div>   
                    
            <div class="formInline">
                <label>Value</label>
                @Html.TextBoxFor(e => e.Value, new { id = "txtValue", @class = "Text" })
	            @Html.ValidationMessageFor(e => e.Value) 
                <div class="clear"></div>
            </div>
            
            <div class="formInline">
                <label>Sub Value</label>
                @Html.TextBoxFor(e => e.Sub_Value, new { id = "txtSub_Value", @class = "Text" })
	            
                <div class="clear"></div>
            </div>  
            
            <div class="formInline">
                <label>Measure</label>
                @Html.TextBoxFor(e => e.Measure, new { id = "txtMeasure", @class = "Text" })
	            @Html.ValidationMessageFor(e => e.Measure)
                <div class="clear"></div>
            </div>  
            
            <div class="formInline">
                <label>Target</label>
                @Html.TextBoxFor(e => e.Target, new { id = "txtTarget", @class = "Text" })
	            @Html.ValidationMessageFor(e => e.Target) 
                <div class="clear"></div>
            </div>  

             <div class="formInline">
                <label>Base</label>
                @Html.TextBoxFor(e => e.Base, new { id = "txtBase", @class = "Text" })
	            @Html.ValidationMessageFor(e => e.Base) 
                <div class="clear"></div>
            </div>  
            
            <div class="formInline formInlineBtn">      
                @if (Login.AuthorizeSystemPermission(ResourcesHelper.System_Report, ResourcesHelper.Permission_Add))
                {
                    <span class="btnPurple"><input type="button" id="cmdSave" value="Save" onclick="actionClick('save', false);"/></span>
                }
                 <span class="btnPurple"><input type="button" value="Back To List" onclick="window.location = ('@Url.Action("index", "Dashboard_Target_Base", new { systemid = Request["systemid"] })')"/></span>
            </div>
            <div class="clear"></div>
        </div>
    }            
    </div>
</div>