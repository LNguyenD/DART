@model EM_Report.Models.ReportParameterModel
@using EM_Report.Models.RS2005
@using EM_Report.Helpers
@using EM_Report.BLL.Commons
@{
    Layout = null;
    string dateTimeValidate = string.Empty;
    List<string> dependancies = new List<string>();
    List<string> names = new List<string>();
    foreach (var p in Model.lstRSParameters)
    {
        dependancies.AddRange(p.Dependencies ?? new string[] { });
        names.Add(p.Name);
    }
}
@Html.Hidden("reportParameterNames", string.Join(",", names))
@{
    var idx = 0;
    var param = Model.lstRSParameters.ElementAt(idx);

    while (idx < Model.lstRSParameters.Count())
    {

        if (idx >= Model.lstRSParameters.Count())
        {
            break;
        }
        else
        {
            param = Model.lstRSParameters.ElementAt(idx);
        }
        var hide = param.Name.IndexOf(EM_Report.BLL.Commons.Constants.STR_HIDDEN, StringComparison.InvariantCultureIgnoreCase) >= 0 ||
                    (Base.SiteName() == Constants.STR_SITE_HEM && param.Name == Constants.STR_IS_ALL) ? " Hide " : "";
                  
    <div class="LineWrapper SameLine @hide">
        @{
        var label = param.Prompt != string.Empty ? param.Prompt : param.Name;
        var id = "prm" + param.Name;
        string requireClass = (param.AllowBlank || param.Nullable) ? "" : " require ";
        IEnumerable<string> values = null;
        string[] defaultValues = null;
        if (ViewBag.Action == "Edit")
        {
            values = Model.lstRSValues.Where(v => v.Name == param.Name).Select(v => v.Value);
        }
        else
        {
            defaultValues = param.DefaultValues != null ? param.DefaultValues : new string[] { };
        }

        if (param.ValidValues != null && param.Type != ParameterTypeEnum.Boolean)
        {
            // Multi select

            if (param.MultiValue == true)
            {
            <label for="@id">@(label)</label>          
            @Html.CheckBoxListDropDown(@id,
                                    new MultiSelectList(param.ValidValues, "Value", "Label", ViewBag.Action == "Edit" ? values : param.DefaultValues),
                                    new
                                    {
                                        @onchange = "ParameterValueChange(this);",
                                        @class = "cbl-parameter .rpt-parameter-multiselect" + requireClass + (dependancies.Contains(param.Name) ? "prm-dependency" : "")
                                    })
            }
            // Dropdownlist
            else
            {
            <label for="@id">@(label)</label>
            <div class="WrapperSelectBox SelectForm">
                @Html.DropDownList(@id,
                            new SelectList(param.ValidValues, "Value", "Label", ViewBag.Action == "Edit" ? (values != null ? values.FirstOrDefault() : "") : defaultValues.FirstOrDefault()),
                            new
                            {
                                @onchange = "ParameterValueChange(this);",
                                @class = "form-field rpt-parameter-select" + (dependancies.Contains(param.Name) ? "prm-dependency" : "")
                            })
            </div>
            }
        }
        else
        {

            if (param.Type == ParameterTypeEnum.Boolean)
            {
                <label class="Long" for="@id">@(label)</label>
                // checkbox
            @Html.CheckBox(@id, bool.Parse(ViewBag.Action == "Edit" ? (values != null ? values.FirstOrDefault() : "false") : defaultValues.FirstOrDefault()),
                                new
                                {
                                    @onclick = "ParameterValueChange(this);",
                                    @class = "rpt-parameter" + (dependancies.Contains(param.Name) ? "prm-dependency" : "")
                                })
            @*<label class="Long" for="@id">@(label)</label>*@
            }
            else if (param.Type == ParameterTypeEnum.DateTime)
            {
                // Date Time
                dateTimeValidate = dateTimeValidate + id.ToString() + ";";
            <label for="@id">@(label)</label>
                var datetime = DateTime.Parse(ViewBag.Action == "Edit" ? (values != null ? values.FirstOrDefault() : "") : defaultValues.FirstOrDefault(), new System.Globalization.CultureInfo("en-AU"));  
            @Html.TextBox(@id, String.Format("{0:dd/MM/yyyy}", datetime),
                            new
                            {
                                @onchange = "ParameterValueChange(this);",
                                @class = "DatePicker Text" + requireClass + (dependancies.Contains(param.Name) ? "prm-dependency" : ""),
                                @id = id
                            })
                      

            }
            else
            {
                var isLongClass = param.Name.Contains("Form") ? " Long " : string.Empty;
            <label for="@id">@(label)</label>
                // textbox                    
            @Html.TextBox(@id, ViewBag.Action == "Edit" ? (values != null ? values.FirstOrDefault() : "") : EM_Report.BLL.Commons.Commons.MergeStringArray(defaultValues),
                                new
                                {
                                    @onchange = "ParameterValueChange(this);",
                                    @class = "Text" + requireClass + isLongClass + (dependancies.Contains(param.Name) ? "prm-dependency" : "")
                                })
                if (param.Name.Contains("_HasPolicyForm"))
                {
            <span class="Button"><a class="SmallButton" href="#" rel="#searchPolicy" id="cmdPolicy"
                onclick="ShowPolicies(); return false;">Search policy</a></span>
                }
                if (param.Name.Contains("_HasPaymentTypeForm"))
                {
            <span class="Button"><a class="SmallButton" href="#" rel="#searchPayment" id="cmdPaymentType"
                onclick="ShowPaymentTypes(); return false;">Search payment type</a></span>
                }
                if (param.Name.Contains("_HasCreditorForm"))
                {
            <span class="Button"><a class="SmallButton" href="#" rel="#searchCreaditor" id="cmdCreditor"
                onclick="ShowCreditors(); return false;">Search Creditor</a></span>
                }
                if (param.Name.Contains("_HasBrokerForm"))
                {
            <span class="Button"><a class="SmallButton" href="#" rel="#searchBroker" id="cmdBroker"
                onclick="ShowBrokers(); return false;">Search Broker</a></span>
                }
                if (param.Name.Contains("_HasProviderForm"))
                {
            <span class="Button"><a class="SmallButton" href="#" rel="#searchProvider" id="cmdProvider"
                onclick="ShowProviders(); return false;">Search Provider</a></span>
                }
            }
        }

        idx++;
            
        }
    </div>            
    }
    @Html.Hidden("dateTimeValidate", dateTimeValidate);
    @Html.Hidden("hdClientUTC", "");   
    @Html.Hidden("hdServerUTC", EM_Report.BLL.Resources.Resource.strDestinationTimeZoneIdServer); 
}  
<script type="text/javascript">
    $(document).ready(function () {
        $('#hdClientUTC').val(getTimezoneName());
        if ($("#hdServerUTC").val() != $("#hdClientUTC").val() && $("#StartDate").length > 0 && $("#SubscriptionID").length > 0 && $("#SubscriptionID").val() != "") // convert date time from report server to local
        {
            var url = g_baseUrl + "/Subscription/ConvertServerTimeToClientTime";
            $.post(url, { "dtServer": $("#StartDate").val(), strSourceTimeZoneIdClient: $('#hdClientUTC').val() }, function (response) {
                var d = new Date(Date.parse(response));
                var nHour = d.getHours();
                var nMinute = d.getMinutes();
                var AMPM = "AM";
                if (nHour >= 12) {
                    AMPM = "PM";
                    nHour = nHour - 12;
                }
                if (nHour == 0) {
                    nHour = 12;
                }

                if (nHour < 10) {
                    nHour = "0" + nHour;
                }
                if (nMinute < 10) {
                    nMinute = "0" + nMinute;
                }
                $("#StartHour").val(nHour);
                $("#StartMinute").val(nMinute);
                if (AMPM == "PM") {
                    $("#IsAM_false").attr("checked", true);
                }
                else {
                    $("#IsAM_true").attr("checked", true);
                }
            });
        }

        var dateTimeParaRange = $('#dateTimeValidate').val();
        if (dateTimeParaRange !== undefined && dateTimeParaRange != '') {
            var dataTimeParaId = dateTimeParaRange.split(';');
            if (dataTimeParaId.length > 2) {
                var startDate = $('#' + dataTimeParaId[0]).val();
                var endDate = $('#' + dataTimeParaId[1]).val();
                var mindate, maxdate;
                if (startDate !== undefined && endDate !== undefined) {
                    $("#" + dataTimeParaId[0]).dateinput({ trigger: true, selectors: true, format: 'dd/mm/yyyy' })
                    $("#" + dataTimeParaId[1]).dateinput({ trigger: true, selectors: true, format: 'dd/mm/yyyy' })
                    $("#" + dataTimeParaId[0]).data("dateinput").change(function () {
                        // we use it's value for the seconds input min option
                        mindate = new Date(this.getValue().getFullYear(), this.getValue().getMonth(), this.getValue().getDate());
                        setTimeout(function () { $("#" + dataTimeParaId[1]).data("dateinput").setMin(mindate, true); }, 500);
                    });
                    $("#" + dataTimeParaId[1]).data("dateinput").change(function () {
                        maxdate = new Date(this.getValue().getFullYear(), this.getValue().getMonth(), this.getValue().getDate());
                        if (mindate <= maxdate)
                            setTimeout(function () { $("#" + dataTimeParaId[0]).data("dateinput").setMax(maxdate, true); }, 500);

                    });

                }

            }
        }
    });
</script>
